@page "/createNote"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using BlazorNotesApp.Models
@using BlazorNotesApp.Services
@using BlazorNotesApp.Components.Shared
@using NUnit.Framework.Internal
@inject INoteService NoteService
@inject NavigationManager _nav
@using FluentValidation;
@using FluentValidation.Results;
@using ValidationException = FluentValidation.ValidationException

<Heading Title="Add note"></Heading>

<NoteForm OnSubmit="AddNote"></NoteForm>

@if (ShowAlert)
{
  <Alert Success=@Success Content="@AlertContent"></Alert>
}

@code {

    private bool ShowAlert { get; set; }
    private bool Success { get; set; }
    private string AlertContent { get; set; }

    private async Task AddNote(Note newNote)
    {
        newNote.CreatedAt = DateTime.UtcNow;
        try
        {
            await NoteService.CreateNote(newNote);
            ShowAlert = true;
            Success = true;
            await Task.Delay(1000);
            _nav.NavigateTo("/");
        }
        catch (ValidationException e)
        {
            var allowedProperties = new[] { "Title", "Content" };

            var relevantError = e.Errors
                .Where(e => allowedProperties.Contains(e.PropertyName))
                .FirstOrDefault();

            AlertContent = $"Validation failed: {relevantError.PropertyName} - {relevantError.ErrorMessage}";
            ShowAlert = true;
        }
        catch (Exception e)
        {
            AlertContent = e.Message;
            ShowAlert = true;
        }
        
    }

   
}