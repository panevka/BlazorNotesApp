@page "/updateNote/{Id:int}"
@inject INoteService NoteService
@rendermode InteractiveServer
@using BlazorNotesApp.Models
@using BlazorNotesApp.Services
@using BlazorNotesApp.Components.Shared
@using FluentValidation

<Heading Title="Edit note"></Heading>

@if (_currentNote == null)
{
    <p>Loading...</p>
}
else
{
    <NoteForm OnSubmit="EditNote" PredefinedNote="_currentNote"></NoteForm>
    @if (ShowAlert)
    {
        <Alert Success="@Success" Content="@AlertContent"></Alert>
    }
    
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Note? _currentNote;
    private bool Success { get; set; }
    private bool ShowAlert { get; set; }
    private string AlertContent { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        _currentNote = await NoteService.GetNoteById(Id);
    }

    private async Task EditNote(Note updatedNote)
    {
        ShowAlert = false;
        AlertContent = string.Empty;
        try
        {
            updatedNote.CreatedAt = DateTime.UtcNow;
            await NoteService.UpdateNote(updatedNote);
            AlertContent = "Note modified successfully";
            Success = true;
            ShowAlert = true;
            
        }
        catch (ValidationException e)
        {
            var allowedProperties = new[] { "Title", "Content" };

            var relevantError = e.Errors
                .Where(e => allowedProperties.Contains(e.PropertyName))
                .FirstOrDefault();

            AlertContent = $"Validation failed: {relevantError.PropertyName} - {relevantError.ErrorMessage}";
            Success = false;
            ShowAlert = true;
        }
        catch (Exception e)
        {
            AlertContent = e.Message;
            ShowAlert = true;
        }
        
    }

}