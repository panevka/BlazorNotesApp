@page "/"
@rendermode InteractiveServer
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div id="container" class="@_currentTheme">
    <header>
        Header Content
        
        <button @onclick="ToggleTheme">Toggle theme</button>
    </header>

    <aside id="left-panel">
        Left Panel Content
    </aside>

    <main>
        <div id="carouselExampleSlidesOnly" class="carousel slide" data-bs-ride="carousel">
            <div class="carousel-inner">
                <div class="carousel-item active">
                    <img class="d-block w-100" src="https://picsum.photos/800/400" alt="First slide">
                </div>
                <div class="carousel-item">
                    <img class="d-block w-100" src="https://picsum.photos/800/400" alt="Second slide">
                </div>
                <div class="carousel-item">
                    <img class="d-block w-100" src="https://picsum.photos/800/400" alt="Third slide">
                </div>
            </div>
        </div>

    </main>
</div>

@code
{
    private string _currentTheme;

    private async void ToggleTheme()
    {
        if (_currentTheme == "light-theme")
        {
            _currentTheme = "dark-theme";
        }
        else
        {
            _currentTheme = "light-theme";
        }

        await StoreData("theme", _currentTheme);
    }
    
    private async Task StoreData(string key, string value)
    {
        if(!string.IsNullOrWhiteSpace(key) && !string.IsNullOrWhiteSpace(value))
        {
            await localStorage.SetItemAsync(key, value);
        }
    }
    
    private async Task<string> RetrieveData(string key)
    {
        string? storedData = await localStorage.GetItemAsync<string>(key);
        if (string.IsNullOrEmpty(storedData))
            throw new Exception("Key either is of null value, empty or does not exist.");
        return storedData;
    }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            string storedTheme = await RetrieveData("theme");
            _currentTheme = storedTheme;
        }
        catch
        {
            _currentTheme = "light-theme";
        }
    }

}
